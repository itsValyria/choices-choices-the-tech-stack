---
import { fetchData } from '../lib/fetch-api-data';

// Fetching data from the Directus API
const { webinars, contourings } = await fetchData();
---

<h2>Featured webinars</h2>
<ul class="webinar__carousel">
  {webinars.slice(0, 4).map(webinar => (
    <li>
      <article>
        <a href={`/webinars/${webinar.slug}`}>
          <div class="webinar__image--container">
            <img 
              src={`https://fdnd-agency.directus.app/assets/${webinar.thumbnail.id}`} 
              srcset={`https://fdnd-agency.directus.app/assets/${webinar.thumbnail.id}?w=300 300w,
                        https://fdnd-agency.directus.app/assets/${webinar.thumbnail.id}?w=600 600w,
                        https://fdnd-agency.directus.app/assets/${webinar.thumbnail.id}?w=1200 1200w`} 
              sizes="(max-width: 600px) 300px, (max-width: 1200px) 600px, 1200px" 
              alt="thumbnail" 
              loading="lazy"
            />
            <p class="webinar__duration">{webinar.duration}</p>
          </div>
          <h3>{webinar.title}</h3>
          <p class="webinar__speakers">
            {webinar.speakers.map(speaker => (
              <span>{speaker.avl_speakers_id.fullname}</span>
            ))}
          </p>
          <div class="webinar__categories">
            {webinar.categories.map(category => (
              <p class="webinar__category">{category.avl_categories_id.name}</p>
            ))}
          </div>
        </a>
      </article>
    </li>
  ))}
</ul>
<a class="webinar__button" href="/webinars">See all webinars</a>

<style>
  /* ---------------- Webinar Overview ---------------- */
  article h3 {
    margin: 0.2rem 0;
  }

  article p {
    margin: 0;
  }

  article p:nth-last-child(2) {
    color: var(--text-accent);
  }

  article .webinar__speakers span:not(:first-child)::before {
    content: " â€” ";
  }

  .webinar__carousel {
      display: flex;
      overflow-x: auto;
      scroll-snap-type: x mandatory;
      scroll-padding-left: 0px;
      -webkit-overflow-scrolling: touch;
      scroll-behavior: smooth;
      margin: 0 auto;
      gap: 10px;
  }

  .webinar__carousel li a {
    display: flex;
    align-items: flex-start;
    flex-direction: column;
    padding: 0;
  }

  .webinar__image--container {
    position: relative;
  }

  .webinar__image--container img {
    height: 12em;
    border-radius: var(--border-radius-sm);
  }

  .webinar__duration {
    position: absolute;
    bottom: 12px;
    right: 6px;
    background-color: var(--darker-black);
    color: var(--lighter-white);
    width: min-content;
    padding: 0.2rem 0.4rem;
    border-radius: var(--border-radius-sm);
  }

  .webinar__category {
    display: none;
  }

  .webinar__button {
    display: inline-block;
    background-color: var(--button-background);
    color: var(--button-text);
    padding: 0.4rem 0.8rem;
    border-radius: var(--border-radius-sm);
    text-transform: uppercase;
    font-weight: bold;
    margin: 0.6rem 0;
  }

  /* ---------------- Media Queries ---------------- */
  @media screen and (min-width: 768px) {
    .webinar__carousel {
      scrollbar-width: none;
    }
  }

  @media screen and (min-width: 1349px) {
    .webinar__carousel {
      display: flex;
      justify-content: flex-start;
      overflow-x: unset;
      margin: 0;
    }

    .webinar__carousel li {
      max-width: 22em;
    }

    .webinar__carousel li a {
      max-width: 22em;
    }

    .webinar__carousel.dragging {
      cursor: grabbing;
      cursor: -webkit-grabbing;
    }

    .webinar__carousel {
      cursor: grab;
      cursor: -webkit-grab;
    }
  }

  @media screen and (min-width: 1799px) {
    
  }
</style>

<script>
  // Get the carousel element and cast it as an HTMLElement or null (if not found, because typescript, yay)
  const carousel = document.querySelector('.webinar__carousel') as HTMLElement | null;

  // Check if the device supports touch (for disabling drag on touch devices)
  const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;

  // Only apply drag functionality on non-touch devices
  if (carousel && !isTouchDevice) { 
    let isDragging = false;
    let startPos = 0;
    let currentScrollPos = 0;

    // Event listener for when the user clicks the mouse down, 
    // cast the event as a MouseEvent, set dragging flag to true, add class to change cursor style, 
    // calculate and store initial/current mouse position.
    carousel.addEventListener('mousedown', (e) => {
      const mouseEvent = e as MouseEvent;
      isDragging = true;
      carousel.classList.add('dragging');
      startPos = mouseEvent.pageX - carousel.offsetLeft;
      currentScrollPos = carousel.scrollLeft;
    });

    // Event listener for when the mouse leaves the carousel area, only execute if the dragger is active, 
    // stop dragging, remove dragging class
    carousel.addEventListener('mouseleave', () => {
      if (isDragging) {
        isDragging = false;
        carousel.classList.remove('dragging');
      }
    });

    // Event listener for when the mouse button is released, only execute when dragging is active, stop dragging,
    // remove dragging class
    carousel.addEventListener('mouseup', () => {
      if (isDragging) {
        isDragging = false;
        carousel.classList.remove('dragging');
      }
    });

    // Event listener for when the mouse moves (dragging), only execute if dragging is active, cast as MouseEvent, 
    // preventDefault behavior like text selection
    carousel.addEventListener('mousemove', (e) => {
      if (!isDragging) return;
      const mouseEvent = e as MouseEvent;
      e.preventDefault();

      // Calculate the new mouse position relative to the carousel, calculate the scroll distance,
      // multiply by 2 to increase scroll speed, update the carousel scroll position based on the drag
      const x = mouseEvent.pageX - carousel.offsetLeft;
      const walk = (x - startPos) * 2;
      carousel.scrollLeft = currentScrollPos - walk;
    });
  }
</script>